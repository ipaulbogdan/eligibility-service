/*
 * This file is generated by jOOQ.
 */
package com.idorasi.eligibility.entity.tables;


import com.idorasi.eligibility.entity.Public;
import com.idorasi.eligibility.entity.tables.records.EligibilityRecordsRecord;

import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EligibilityRecords extends TableImpl<EligibilityRecordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eligibility_records</code>
     */
    public static final EligibilityRecords ELIGIBILITY_RECORDS = new EligibilityRecords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EligibilityRecordsRecord> getRecordType() {
        return EligibilityRecordsRecord.class;
    }

    /**
     * The column <code>public.eligibility_records.member_unique_id</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> MEMBER_UNIQUE_ID = createField(DSL.name("member_unique_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.eligibility_records.first_name</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.last_name</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.date_of_birth</code>.
     */
    public final TableField<EligibilityRecordsRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.eligibility_records.gender</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.relations</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> RELATIONS = createField(DSL.name("relations"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.sub_group</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> SUB_GROUP = createField(DSL.name("sub_group"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.job_type</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> JOB_TYPE = createField(DSL.name("job_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.hire_date</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> HIRE_DATE = createField(DSL.name("hire_date"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.eligibility_records.eligibility_start_date</code>.
     */
    public final TableField<EligibilityRecordsRecord, LocalDate> ELIGIBILITY_START_DATE = createField(DSL.name("eligibility_start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.eligibility_records.eligibility_end_date</code>.
     */
    public final TableField<EligibilityRecordsRecord, LocalDate> ELIGIBILITY_END_DATE = createField(DSL.name("eligibility_end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.eligibility_records.employee_status</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> EMPLOYEE_STATUS = createField(DSL.name("employee_status"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.phone_number</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.address_1</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> ADDRESS_1 = createField(DSL.name("address_1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.address_2</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> ADDRESS_2 = createField(DSL.name("address_2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.city</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.state_code</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> STATE_CODE = createField(DSL.name("state_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.zip_code</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> ZIP_CODE = createField(DSL.name("zip_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.country</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eligibility_records.employee_group</code>.
     */
    public final TableField<EligibilityRecordsRecord, String> EMPLOYEE_GROUP = createField(DSL.name("employee_group"), SQLDataType.CLOB, this, "");

    private EligibilityRecords(Name alias, Table<EligibilityRecordsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EligibilityRecords(Name alias, Table<EligibilityRecordsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.eligibility_records</code> table reference
     */
    public EligibilityRecords(String alias) {
        this(DSL.name(alias), ELIGIBILITY_RECORDS);
    }

    /**
     * Create an aliased <code>public.eligibility_records</code> table reference
     */
    public EligibilityRecords(Name alias) {
        this(alias, ELIGIBILITY_RECORDS);
    }

    /**
     * Create a <code>public.eligibility_records</code> table reference
     */
    public EligibilityRecords() {
        this(DSL.name("eligibility_records"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EligibilityRecordsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(EligibilityRecords.ELIGIBILITY_RECORDS, DSL.name("eligibility_records_pkey"), new TableField[] { EligibilityRecords.ELIGIBILITY_RECORDS.MEMBER_UNIQUE_ID }, true);
    }

    @Override
    public EligibilityRecords as(String alias) {
        return new EligibilityRecords(DSL.name(alias), this);
    }

    @Override
    public EligibilityRecords as(Name alias) {
        return new EligibilityRecords(alias, this);
    }

    @Override
    public EligibilityRecords as(Table<?> alias) {
        return new EligibilityRecords(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EligibilityRecords rename(String name) {
        return new EligibilityRecords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EligibilityRecords rename(Name name) {
        return new EligibilityRecords(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EligibilityRecords rename(Table<?> name) {
        return new EligibilityRecords(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords where(Condition condition) {
        return new EligibilityRecords(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EligibilityRecords where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EligibilityRecords where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EligibilityRecords where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EligibilityRecords where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EligibilityRecords whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
